(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MzpDetails"] = factory();
	else
		root["MzpDetails"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 876:
/***/ (function(module) {

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var MzpDetails = {};
var _count = 0;
MzpDetails.isSupported = function () {
  if (typeof window.MzpSupports !== 'undefined' && typeof window.MzpUtils !== 'undefined') {
    return window.MzpSupports.classList;
  } else {
    return false;
  }
};

/**
 * open
 * @param {String} id - id of the container to open
 * @param {Object} options - configurable options
 */
MzpDetails.open = function (id, options) {
  var control = document.querySelector("[aria-controls=".concat(id, "]"));
  var details = document.getElementById(id);
  control.setAttribute('aria-expanded', true);
  details.setAttribute('aria-hidden', false);
  details.classList.remove('is-closed');
  if (typeof options.onDetailsOpen === 'function') {
    options.onDetailsOpen(details);
  }
};

/**
 * close
 * @param {String} id - id of the container to close
 * @param {Object} options - configurable options
 */
MzpDetails.close = function (id, options) {
  var control = document.querySelector("[aria-controls=".concat(id, "]"));
  var details = document.getElementById(id);
  control.setAttribute('aria-expanded', false);
  details.setAttribute('aria-hidden', true);
  details.classList.add('is-closed');
  if (typeof options.onDetailsClose === 'function') {
    options.onDetailsClose(details);
  }
};

/**
 * toggle
 * @param {String} id - id of the container to toggle
 * @param {Object} options - configurable options
 */
MzpDetails.toggle = function (id, options) {
  var details = document.getElementById(id);
  var isClosed = details.getAttribute('aria-hidden');
  if (isClosed === 'true') {
    MzpDetails.open(id, options);
  } else {
    MzpDetails.close(id, options);
  }
};

/**
 * handleControlActivation
 * @param {Event} e - event to handle
 * @param {Object} options - configurable options
 */
MzpDetails.handleControlActivation = function (e, options) {
  var control = e.target;
  var id = control.getAttribute('aria-controls');
  MzpDetails.toggle(id, options);
};

/**
 * initItem
 * @param {Object} el - Element to place the control inside of
 * @param {String} selector - Selector for all control wrappers
 * - assumes every sibling until the next control is associated with the control
 * @param {Object} options - configurable options
 */
MzpDetails.initItem = function (el, selector, options) {
  var summary = el;
  var control = document.createElement('button');
  var details;
  var parent = summary.parentNode;

  // if it's already been initialized, don't do it again
  if (summary.querySelectorAll('button').length !== 0) {
    return;
  }

  // Expand
  // siblings of the summary, until next summary
  var summarySiblings = window.MzpUtils.nextUntil(summary, selector);

  // look to see if all children are already in a wrapper we can use
  if (summarySiblings.length === 1) {
    details = summarySiblings[0];
  } else if (summarySiblings.length > 1) {
    details = document.createElement('div');
    summarySiblings.forEach(function (sibling) {
      details.appendChild(sibling);
    });
    summary.parentNode.insertBefore(details, summary.nextSibling);
  } else {
    // no children were found, something is probably wrong, let's stop here
    return;
  }

  // add class to parent to indicate js initialized
  parent.classList.add('is-details');

  // add class to content wrapper
  details.classList.add('mzp-js-details-wrapper');

  // look for existing ID to use
  if (!details.id) {
    // if details already has ID, use that, if not assign one using the selector minus all not-letters
    var unique = selector.replace(/[^a-zA-Z]+/g, '');
    details.id = 'expand-' + unique + '-' + _count;
    _count += 1;
  }

  // close by default
  // TODO: add support for open attribute
  details.setAttribute('aria-hidden', true);
  details.classList.add('is-closed');

  // Control
  control.setAttribute('type', 'button');
  // add aria-controls
  control.setAttribute('aria-controls', details.id);
  // add aria-expanded
  control.setAttribute('aria-expanded', false);
  // add listener
  control.addEventListener('click', function (e) {
    MzpDetails.handleControlActivation(e, options);
  }, false);
  // copy the summary's contents into the control
  var summaryChildren = Array.prototype.slice.call(summary.childNodes);
  summaryChildren.forEach(function (child) {
    control.appendChild(child);
  });
  // append control element
  summary.appendChild(control);
  summary.classList.add('is-summary');
};

/**
 * destroyItem
 * @param {Object} el - Element the control was placed inside of
 * - does not attempt to remove the details wrapper
 */
MzpDetails.destroyItem = function (el) {
  var summary = el;
  var parent = summary.parentNode;
  var details = summary.nextElementSibling;
  var control = summary.querySelector('button');

  // if it's already been destroyed, don't do it again
  if (summary.querySelectorAll('button').length === 0) {
    return;
  }
  parent.classList.remove('is-details');
  details.removeAttribute('aria-hidden');
  details.classList.remove('is-closed');
  // move control's contents back to summary
  var controlChildren = Array.prototype.slice.call(control.childNodes);
  controlChildren.forEach(function (child) {
    summary.appendChild(child);
  });
  summary.removeChild(control);
  summary.classList.remove('is-summary');
};

/**
 * Init
 * @param {Object} selector - CSS selector matching "summary" elements
 * @param {Object} options - configurable options
     - passed in to the init function and passed around from there
        example:
        var testOptions = {
            onDetailsOpen : myDetailsOpenCallback(),
            onDetailsClose : function(){ //anonymous callback }
        };
    */
MzpDetails.init = function (selector, options) {
  if (!MzpDetails.isSupported()) {
    return;
  }
  if (typeof options === 'undefined') {
    options = {};
  }
  var summaries = document.querySelectorAll(selector);
  // loop through controls on the page and init them one at a time
  for (var i = 0; i < summaries.length; i++) {
    MzpDetails.initItem(summaries[i], selector, options);
  }
};

/**
 * Destroy
 * @param {Object} selector - CSS selector matching "summary" elements
 * @param {Object} options - configurable options
 */
MzpDetails.destroy = function (selector, options) {
  var summaries = document.querySelectorAll(selector, options);
  // loop through controls on the page and destroy them one at a time
  for (var i = 0; i < summaries.length; i++) {
    MzpDetails.destroyItem(summaries[i], selector, options);
  }
};
module.exports = MzpDetails;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(876);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});