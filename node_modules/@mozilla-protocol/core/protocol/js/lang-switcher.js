(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MzpLangSwitcher"] = factory();
	else
		root["MzpLangSwitcher"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 154:
/***/ (function(module) {

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var MzpLangSwitcher = {};

/**
 * Returns URL pathname preceded by a new page locale.
 * Assumes first path immediately after hostname is the page locale.
 * @param {Object} Location interface
 * @param {String} Newly selected language code e.g. `de`
 * @return {String} pathname e.g. `/de/firefox/`
 */
MzpLangSwitcher.switchPath = function (location, newLang) {
  var parts = location.pathname.slice(1).split('/');
  var currentLang = '/' + parts[0] + '/';

  // check that first path is a valid lang code.
  if (!/^(\/\w{2}-\w{2}\/|\/\w{2,3}\/)/.test(currentLang)) {
    return false;
  }
  var urlpath = parts.slice(1).join('/');
  return '/' + newLang + '/' + urlpath + location.search;
};

/**
 * Redirect page to destination URL if valid
 * @param {String} destination
 */
MzpLangSwitcher.doRedirect = function (destination) {
  if (destination) {
    window.location.href = destination;
  }
};

/**
 * Initialize footer lang switcher.
 * @param {function} Custom callback for analytics.
 */
MzpLangSwitcher.init = function (callback) {
  var language = document.querySelectorAll('.mzp-js-language-switcher-select');
  for (var i = 0; i < language.length; i++) {
    language[i].setAttribute('data-previous-language', language[i].value);
    language[i].addEventListener('change', function (e) {
      var newLanguage = e.target.value;
      var previousLanguage = e.target.getAttribute('data-previous-language');

      // support custom callback for page analytics.
      if (typeof callback === 'function') {
        callback(previousLanguage, newLanguage);
      }
      MzpLangSwitcher.doRedirect(MzpLangSwitcher.switchPath(window.location, newLanguage));
    }, false);
  }
};
module.exports = MzpLangSwitcher;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(154);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});