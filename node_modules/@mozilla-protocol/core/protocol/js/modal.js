(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["MzpModal"] = factory();
	else
		root["MzpModal"] = factory();
})(self, function() {
return /******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 487:
/***/ (function(module) {

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

var MzpModal = {};
var open = false;
var body = document.body;
var html = document.documentElement;
var options = {};
var pageContentParent;
var pageContent;
var modal;

/*
origin: element that triggered the modal
content: content to display in the modal
options: object of optional params:
    title: title to display at the top of the modal.
    className: optional CSS class name to apply to the modal window.
    onCreate: function to fire after modal has been created.
    onDestroy: function to fire after modal has been closed.
    allowScroll: boolean - allow/restrict page scrolling when modal is open.
    closeText: string to use for close button a11y.
*/
MzpModal.createModal = function (origin, content, opts) {
  options = opts;
  var isSmallViewport = window.innerWidth < 760;

  // Make sure modal is closed (if one exists)
  if (open) {
    MzpModal.closeModal();
  }

  // Create new modal
  var title = options && options.title ? options.title : '';
  var className = options && options.className ? options.className : '';
  var closeText = options && options.closeText ? options.closeText : '';
  var modalFragment = "\n        <div class=\"mzp-c-modal ".concat(className, "\" role=\"dialog\" aria-labelledby=\"").concat(origin.getAttribute('id'), "\" tabindex=\"-1\">\n            <div class=\"mzp-c-modal-window\">\n                <div class=\"mzp-c-modal-inner\">\n                    <header><h2>").concat(title, "</h2></header>\n                    <div class=\"mzp-c-modal-close\">\n                        <button type=\"button\" class=\"mzp-c-modal-button-close\">").concat(closeText, "</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ");
  if (options && !options.allowScroll || isSmallViewport) {
    html.classList.add('mzp-is-noscroll');
  } else {
    html.classList.remove('mzp-is-noscroll');
  }

  // Add modal to page
  body.insertAdjacentHTML('beforeend', modalFragment);
  modal = document.querySelector('.mzp-c-modal');
  pageContent = content;
  pageContentParent = content.parentNode;
  var modalInner = document.querySelector('.mzp-c-modal-inner');
  modalInner.appendChild(content);
  content.classList.add('mzp-c-modal-overlay-contents');

  // ensure focus is moved to the modal only after CSS animation completes.
  // issue: https://github.com/mozilla/protocol/issues/829
  modal.addEventListener('animationend', function () {
    modal.focus();
  }, false);

  // close modal on clicking close button or background.
  var closeButton = document.querySelector('.mzp-c-modal-button-close');
  closeButton.addEventListener('click', MzpModal.closeModal, false);
  closeButton.setAttribute('title', closeText);

  // close modal on clicking the background (but not bubbled event).
  document.querySelector('.mzp-c-modal .mzp-c-modal-window').addEventListener('click', function (e) {
    if (e.target === this) {
      MzpModal.closeModal();
    }
  }, false);

  // close with escape key
  document.addEventListener('keyup', _onDocumentKeyUp, false);

  // prevent focusing out of modal while open
  document.addEventListener('focus', _onDocumentFocus, false);

  // remember which element opened the modal for later focus
  origin.classList.add('mzp-c-modal-origin');
  open = true;

  // execute (optional) open callback
  if (options && typeof options.onCreate === 'function') {
    options.onCreate();
  }
};
var _onDocumentKeyUp = function _onDocumentKeyUp(e) {
  if (e.keyCode === 27 && open) {
    MzpModal.closeModal();
  }
};
var _onDocumentFocus = function _onDocumentFocus(e) {
  // .contains must be called on the underlying HTML element, not the jQuery object
  if (open && !modal.contains(e.target)) {
    e.stopPropagation();
    modal.focus();
  }
};
MzpModal.closeModal = function (e) {
  if (e) {
    e.preventDefault();
  }

  // return modal content to the page
  pageContentParent.appendChild(pageContent);

  // remove modal from the page
  modal.parentNode.removeChild(modal);

  // allow page to scroll again
  html.classList.remove('mzp-is-noscroll');

  // restore focus to element that opened the modal
  var origin = document.querySelector('.mzp-c-modal-origin');
  origin.focus();
  origin.classList.remove('mzp-c-modal-origin');
  open = false;

  // unbind document listeners
  document.removeEventListener('focus', _onDocumentFocus, false);

  // execute (optional) callback
  if (options && typeof options.onDestroy === 'function') {
    options.onDestroy();
  }

  // free up options
  options = {};
};
module.exports = MzpModal;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(487);
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});